security:
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'auto'
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    User: { password: '$2y$13$o3MFfmSRwAxbhN.EZA0BXuqDVQJq.ABX6gK9afuV6hr3X0MHo/J.S', roles: ['ROLE_USER'] }
                    Admin: { password: '$2y$13$.cTaT34HzLSO2Xuhhkk7peb2e./sVx5bVJBBaMqcv2YvQIe8/5.Kq', roles: ['ROLE_ADMIN'] }
                    SuperAdmin: { password: '$2y$13$Bzp4lsuQcMa4ugnd1UMlv.G6e/4Iyxgox73rjYKzlcBj0BaA1v8/m', roles: ['ROLE_SUPER_ADMIN'] }
                    Support: { password: '$2y$13$6sE2kMdawtkqlQEJDYVjyeBjIErijSd0iQBNX73M4xfcr4vNY/m0i', roles: ['ROLE_SUPPORT'] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            # http_basic:
            #     realm: My Secured Area
            form_login:
                login_path: login
                check_path: login
            logout:
                path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_CITY_INDEX
            - ROLE_CITY_NEW
            - ROLE_CITY_SHOW
            - ROLE_CITY_EDIT
            - ROLE_CITY_DELETE
        ROLE_ADMIN:
            - ROLE_WEATHER_NEW
            - ROLE_SUPPORT
        ROLE_SUPPORT:
            - ROLE_WEATHER_SHOW
            - ROLE_WEATHER_EDIT
            - ROLE_WEATHER_DELETE
        ROLE_USER:
            - ROLE_WEATHER_SHOW


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
